package day19

import (
	"fmt"
	"strings"
)

type Solution struct {
	Towels  []Towel
	Designs []Design
}

func (s *Solution) RunToConsole() error {
	fmt.Print("DAY 19:\n")

	fmt.Print("  PART 1:\n")
	fmt.Printf("    Possible designs: %d\n", PossibleDesigns(s.Designs, s.Towels))

	fmt.Print("  PART 2:\n")
	fmt.Printf("    Total combinations: %d\n", TotalCombinations(s.Designs, s.Towels))

	return nil
}

// PossibleDesigns returns the set of all designs that have one or more solutions with these towels.
func PossibleDesigns(designs []Design, towels []Towel) int {
	possibleDesigns := 0
	for _, design := range designs {
		if isPossible(design, towels) {
			possibleDesigns++
		}
	}
	return possibleDesigns
}

// TotalCombinations returns the total number of possible towel combinations that meet the given designs.
func TotalCombinations(designs []Design, towels []Towel) int {
	totalCombinations := 0
	for _, design := range designs {
		fmt.Printf("    Checking design %q...\n", design)
		totalCombinations += countCombinations(design, towels)
	}
	return totalCombinations
}

func isPossible(design Design, towels []Towel) bool {
	if len(design) == 0 {
		return true
	}
	for _, towel := range towels {
		if strings.HasPrefix(design, towel) && isPossible(design[len(towel):], towels) {
			return true // ok: towel meets design
		}
	}

	return false
}

func countCombinations(design Design, towels []Towel) (combinations int) {
	// create starting node
	q := queue[node]{node{}} // starting node: empty design
	for len(q) != 0 {
		cur := q.Pop()
		if cur.Design == design {
			// ok: this towel completes the design
			combinations++
			continue
		}

		// not yet complete: queue all adjacent candidates
		for _, towel := range towels {
			next := node{Design: cur.Design + towel}
			if strings.HasPrefix(design, next.Design) {
				q.Push(next) // candidate
			}
		}
	}

	return combinations
}

type node struct {
	Design string
}

type queue[T any] []T

func (q *queue[T]) Push(v T) {
	(*q) = append((*q), v)
}

func (q *queue[T]) Pop() T {
	v := (*q)[0]
	(*q) = (*q)[1:]
	return v
}
